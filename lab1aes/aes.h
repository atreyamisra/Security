//see LICENSE for license
#ifndef _RISCV_AES_ROCC_H
#define _RISCV_AES_ROCC_H

#include "rocc.h"
#include "mmu.h"

#include <stdint.h>
#include <stdio.h>
#include <string.h>


class aes_t : public rocc_t
{
public:
  aes_t() {};

  const char* name() { return "aes"; }

  struct AES_ctx
    {
        uint8_t RoundKey[240];
        uint8_t Iv[16];
    };
  typedef uint8_t state_t[4][4];

  void reset()
  {
    enc_buf_addr=0;
    plaintext_addr=0;
    ciphertext_addr=0;
    iv_addr=0;
    key_addr=0;
    decrypter_text_addr=0;
  }

  reg_t custom0(rocc_insn_t insn, reg_t xs1, reg_t xs2)
  {
    switch (insn.funct)
    {
      case 0:
            enc_buf_addr=xs1;
            plaintext_addr=xs2;
            break;
      case 1:
            ciphertext_addr=xs1;
            iv_addr=xs2;
            break;
      case 2:
            key_addr=xs1;
            decrypter_text_addr=xs2;
            break;
      case 3: {
        unsigned char enc_buf[128];
        unsigned char plaintext[32];
        for (int i = 0; i < 32; i++) {
          plaintext[i] = p->get_mmu()->load_uint8(plaintext_addr + i);
        }
        unsigned char ciphertext[32] = {0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5, 0xb7, 0xa7, 0xf5, 0x04, 0xbb,
                                        0xf3, 0xd2, 0x28, 0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62, 0xb5, 0x9a, 0xca, 0x84,
                                        0xe9, 0x90, 0xca, 0xca, 0xf5, 0xc5};
        unsigned char iv[16] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
                                0xfe, 0xff};
        for (int i = 0; i < 16; i++) {
          iv[i] = p->get_mmu()->load_uint8(iv_addr + i);
        }
        unsigned char key[32] = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d,
                                 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3,
                                 0x09, 0x14, 0xdf, 0xf4};
        for (int i = 0; i < 32; i++) {
          key[i] = p->get_mmu()->load_uint8(key_addr + i);
        }
        struct AES_ctx ctx;
        makeRoundKey(&ctx, key, iv);
        aes(&ctx, plaintext, 32, enc_buf);
        int n = sizeof(plaintext) / sizeof(plaintext[0]);
        //printf("\n");
        //p->get_mmu()->store_uint8(xs1, n);
        for (int i = 0; i < 32; i++) {
          p->get_mmu()->store_uint8(enc_buf_addr + i, enc_buf[i]);
        }
        /*
        printf("hashedChars: ");

        for (int i = 0; i < 32; i++) {
          printf("%d", plaintext[i]);
        }
        printf("\n");
         */
        break;
      }
          case 4:{
            unsigned char iv[16] = {0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff};
            for(int i=0; i<16;i++){
              iv[i]=p->get_mmu()->load_uint8(iv_addr + i);
            }
            unsigned char key[32] = {0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4};
            for(int i=0; i<32;i++){
              key[i]=p->get_mmu()->load_uint8(key_addr + i);
            }
            unsigned char enc_buf[128];
            for(int i=0; i<32; i++){
              enc_buf[i]=p->get_mmu()->load_uint8(enc_buf_addr+i);
            }
            unsigned char decrypted_text[32];
            struct AES_ctx ctx;
            makeRoundKey(&ctx, key, iv);
            aes(&ctx, enc_buf, 32, decrypted_text);
            for(int i=0; i<32; i++){
              p->get_mmu()->store_uint8(decrypter_text_addr+i, decrypted_text[i]);
            }
            break;
          }
      default:
        illegal_instruction();
    }

    return -1; // accelerator currently returns nothing
  }
    void static aes(struct AES_ctx* ctx, uint8_t* buf, uint32_t length, uint8_t* output)
    {
      //printf("started");

      uint8_t buffer[16];

      unsigned i;
      int bi;
      for (i = 0, bi = 16; i < length; ++i, ++bi)
      {
        if (bi == 16) /* we need to regen xor compliment in buffer */
        {

          memcpy(buffer, ctx->Iv, 16);
          Cipher((state_t*)buffer,ctx->RoundKey);

          for (bi = (16 - 1); bi >= 0; --bi)
          {
            if (ctx->Iv[bi] == 255)
            {
              ctx->Iv[bi] = 0;
              continue;
            }
            ctx->Iv[bi] += 1;
            break;
          }
          bi = 0;
        }

        output[i] = (buf[i] ^ buffer[bi]);
      }
      //printf("ended");
    }
    static void makeRoundKey(struct AES_ctx* ctx, uint8_t* key, uint8_t* iv)
    {
      KeyExpansion(ctx->RoundKey, key);
      memcpy (ctx->Iv, iv, 16);
    }
    static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
    {
      uint8_t sbox1[256] = {
              0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
              0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
              0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
              0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
              0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
              0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
              0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
              0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
              0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
              0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
              0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
              0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
              0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
              0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
              0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
              0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
      uint8_t Rcon1[11] = {
              0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };
      unsigned i, j, k;
      int Nk=8;
      int Nr=14;
      int Nb=4;
      uint8_t tempa[4]; // Used for the column/row operations

      // The first round key is the key itself.
      for (i = 0; i < Nk; ++i)
      {
        RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
        RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
        RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
        RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
      }
      // All other round keys are found from the previous round keys.
      int lim=(Nb * (Nr + 1));
      /*
      for(int a=0; a<256; a++){
        printf("%d\n", sbox1[a]);
      }
       */
      for (i = Nk; i < lim; ++i)
      {
          k = (i - 1) * 4;
          tempa[0]=RoundKey[k + 0];
          tempa[1]=RoundKey[k + 1];
          tempa[2]=RoundKey[k + 2];
          tempa[3]=RoundKey[k + 3];
          //printf("%d", tempa[0]);


        if (i % Nk == 0)
        {
            k = tempa[0];
            tempa[0] = tempa[1];
            tempa[1] = tempa[2];
            tempa[2] = tempa[3];
            tempa[3] = k;
            tempa[0] = sbox1[tempa[0]];
            tempa[1] = sbox1[tempa[1]];
            tempa[2] = sbox1[tempa[2]];
            tempa[3] = sbox1[tempa[3]];

          tempa[0] = tempa[0] ^ Rcon1[i/Nk];
        }
        //printf("%d", tempa[0]);

        if (i % Nk == 4) {
        tempa[0] = sbox1[tempa[0]];
        tempa[1] = sbox1[tempa[1]];
        tempa[2] = sbox1[tempa[2]];
        tempa[3] = sbox1[tempa[3]];
        }


        j = i * 4;
        k=(i - Nk) * 4;

        RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
        RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
        RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
        RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
        /*
        //printf("%d", a);
        //printf("%d\n", b);
       RoundKey[j + 0] = RoundKey[k + 0];
       RoundKey[j + 1] = RoundKey[k + 1];
       RoundKey[j + 2] = RoundKey[k + 2];
       RoundKey[j + 3] = RoundKey[k + 3];
       */
      }
    }
    static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
    {
      uint8_t i,j;
      for (i = 0; i < 4; ++i)
      {
        for (j = 0; j < 4; ++j)
        {
          (*state)[i][j] ^= RoundKey[(round * 4 * 4) + (i * 4) + j];
        }
      }
    }
    static void SubBytes(state_t* state)
    {
      uint8_t sbox1[256] = {
              0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
              0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
              0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
              0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
              0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
              0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
              0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
              0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
              0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
              0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
              0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
              0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
              0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
              0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
              0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
              0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
      uint8_t i, j;
      for (i = 0; i < 4; ++i)
      {
        for (j = 0; j < 4; ++j)
        {
          (*state)[j][i] = sbox1[(*state)[j][i]];
        }
      }
    }
    static void ShiftRows(state_t* state)
    {
      uint8_t temp;

      temp           = (*state)[0][1];
      (*state)[0][1] = (*state)[1][1];
      (*state)[1][1] = (*state)[2][1];
      (*state)[2][1] = (*state)[3][1];
      (*state)[3][1] = temp;

      temp           = (*state)[0][2];
      (*state)[0][2] = (*state)[2][2];
      (*state)[2][2] = temp;

      temp           = (*state)[1][2];
      (*state)[1][2] = (*state)[3][2];
      (*state)[3][2] = temp;

      temp           = (*state)[0][3];
      (*state)[0][3] = (*state)[3][3];
      (*state)[3][3] = (*state)[2][3];
      (*state)[2][3] = (*state)[1][3];
      (*state)[1][3] = temp;
    }
    static uint8_t xtime(uint8_t x)
    {
      return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
    }
    static void MixColumns(state_t* state)
    {
      uint8_t i;
      uint8_t Tmp, Tm, t;
      for (i = 0; i < 4; ++i)
      {
        t   = (*state)[i][0];
        Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
        Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
        Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
        Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
        Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
      }
    }
    static void Cipher(state_t* state, uint8_t* RoundKey)
    {
      uint8_t round = 0;

      AddRoundKey(0, state, RoundKey);

      for (round = 1; round < 14; ++round)
      {
        SubBytes(state);
        ShiftRows(state);
        MixColumns(state);
        AddRoundKey(round, state, RoundKey);
      }

      SubBytes(state);
      ShiftRows(state);
      AddRoundKey(14, state, RoundKey);
    }


private:
    reg_t enc_buf_addr;
    reg_t plaintext_addr;
    reg_t ciphertext_addr;
    reg_t iv_addr;
    reg_t key_addr;
    reg_t decrypter_text_addr;
};
REGISTER_EXTENSION(aes, []() { return new aes_t; })
#endif
